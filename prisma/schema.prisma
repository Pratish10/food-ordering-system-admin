// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  FREETIER
  PAID
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(FREETIER)
  encryptedPassword     String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  menus    Menu[]
  tables   Table[]
  category Category[]
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwofactorToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum MenuType {
  Vegeterian
  nonVegeterian
}

enum Availability {
  Available
  notAvailable
}

model Menu {
  id           String       @id @default(cuid())
  name         String       @unique
  description  String
  type         MenuType
  image        String
  category     String
  amount       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isFeatured   Boolean?     @default(false)
  availability Availability

  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]

  @@unique([userId, name])
}

enum TableStatus {
  Vacant
  Occupied
}

model Table {
  id          String      @id @default(cuid())
  tableNumber String      @unique
  tableStatus TableStatus @default(Vacant)
  tableQrCode String
  tableSize   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tableNumber])
}

model Category {
  id        String   @id @default(cuid())
  category  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String
  orderDate   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tableNumber String
  items       OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  menuId   String
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id])
  menuItem Menu   @relation(fields: [menuId], references: [id])
}
